plot(x,y)
source('~/.active-rstudio-document', echo=TRUE)
y <- 2:11
plot(x,y)
library(TIR)
packrat::set_opts(vcs.ignore.src = TRUE, use.cache = TRUE)
install.packages("Roxgen2")
library(TIR)
packrat::disable()
library(TIR)
source('~/SparkleShare/TIR/R/TIR.R', echo=TRUE)
packrat::init(options = list(vcs.ignore.src = TRUE))
install.packages("roxygen2")
library(TIR)
library("roxygen2")
install.packages("roxygen2")
source('~/SparkleShare/TIR/R/cptar.R', echo=TRUE)
source('~/SparkleShare/TIR/R/cptar.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
seted("/home/tian/Share300sdb/Landsat8/N1")
setwd("/home/tian/Share300sdb/Landsat8/N1")
untar()
untar("./L8_tars/")
source('~/SparkleShare/TIR/R/rs.untar.R', echo=TRUE)
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.untar(path"./L8_tars/")
rs.untar("./L8_tars/")
setwd("/home/tian/Share300sdb/Landsat8/N1")
rs.untar(path = "./L8_tars/")
setwd("/home/tian/Share300sdb/Landsat8/N1")
rs.untar(path = "./L8_tars/")
setwd("/home/tian/Share300sdb/Landsat8/N1/L8_tars/")
rs.untar()
phd.untarLandsat  <- function(path = ".", outdir = "../L8_tifs", pattern = ".tgz") {
tarFiles_v <- list.files(path = path, pattern = pattern, all.files = T, full.names = T)
sapply(tarFiles_v, function(i) {untar(tarfile = i, exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
}
phd.untarLandsat()
source('~/SparkleShare/TIR/R/rs.untar.R', echo=TRUE)
rs.untar()
tarFiles_v <- list.files(path = tarDir, pattern = tar, all.files = T, full.names = T)
tarFiles_v <- list.files(path = getwd(), pattern = "tar".tgz, all.files = T, full.names = T)
tarFiles_v <- list.files(path = getwd(), pattern = "tar".tgz, all.files = T, full.names = T)
tarFiles_v <- list.files(path = getwd(), pattern = .tgz, all.files = T, full.names = T)
tarFiles_v <- list.files(path = getwd(), pattern = ".tgz", all.files = T, full.names = T)
sapply(tarFiles_v, function(i) {untar(tarfile = i, exdir = file.path(tifDir,tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {untar(tarfile = i, exdir = file.path(tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {untar(tarfile = i, exdir = tools::file_path_sans_ext(basename(i)))})
list  <- readLines("list.txt")
rs.cptar(list = list, fromdir = getwd(), ourdir = "../copy")
dir.create("../copy")
rs.cptar(list = list, fromdir = getwd(), ourdir = "../copy")
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
list %in% getwd()
getwd()
dir(getwd())
list in getwd()
class(dir(getwd()))
class(list)
match(list,dir(getwd()))
intersect(list,dir(getwd()))
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
intersect(list,dir(getwd()))
match(list,dir(getwd()))
list %in% dir(getwd())
is.true(list %in% dir(getwd()))
all(list %in% dir(getwd()))
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
rs.untar()
rs.untar()
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
dir()
for (i in list){
untar(tarfile = i, exdir = tools::file_path_sans_ext(basename(i)))
}
tools::file_path_sans_ext(basename(list))
for (i in list){
untar(tarfile = i, exdir = tools::file_path_sans_ext(basename(i)))
}
for (i in list){
untar(tarfile = i, exdir = file.path(tools::file_path_sans_ext(basename(i))))
}
todir = "../copy"
for (i in list){
untar(tarfile = i, exdir = file.path(todir,tools::file_path_sans_ext(basename(i))))
}
for (i in list){
untar(tarfile = i, exdir = file.path(todir,tools::file_path_sans_ext(basename(i))))
}
for (i in list){
untar(tarfile = i, exdir = file.path(todir,tools::file_path_sans_ext(basename(i))))
}
for (i in list){
untar(tarfile = i, exdir = paste0(todir,tools::file_path_sans_ext(basename(i))))
}
tools::file_path_sans_ext(basename(list))
for (i in c(list)){
untar(tarfile = i, exdir = paste0(todir,tools::file_path_sans_ext(basename(i))))
}
for (i in c(list)){
untar(tarfile = i, exdir = file.path(todir,tools::file_path_sans_ext(basename(i))))
}
sapply(list, function(i) {untar(tarfile = i, exdir = file.path(getwd(),tools::file_path_sans_ext(basename(i))))})
untar(tarfile = list[1], exdir = file.path(todir,tools::file_path_sans_ext(basename(list[1]))))
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "../copy")
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/L8_tars/copy")
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/L8_tars/copy2")
tools::file_path_sans_ext(basename(list))
tarFiles_v <- list.files(path = tarDir, pattern = tar, all.files = T, full.names = T)
tarDir  <- "./L8_tars"
tifDir  <- "./L8_tifs"
tar  <- "*.tgz"
tarFiles_v <- list.files(path = tarDir, pattern = tar, all.files = T, full.names = T)
tools::file_path_sans_ext(basename(list))
for (i in c(list)){
untar(tarfile = list[1], exdir = file.path(todir,tools::file_path_sans_ext(basename(list[1]))))
}
for (i in c(list)){
untar(tarfile = i)
}
tools::file_path_sans_ext(basename(list))
setwd("/home/tian/Share300sdb/Landsat8/N1/L8_tars/")
sapply(dir(pattern = ".tgz"), function(i) {untar(tarfile = i, exdir = tools::file_path_sans_ext(basename(i)))})
dir(pattern = ".tgz")
sapply(dir(pattern = ".tgz"), function(i) {untar(tarfile = i, exdir = tools::file_path_sans_ext(basename(i)))})
sapply(dir(pattern = ".tgz"), function(i) untar(tarfile = i, exdir = file.path("./",tools::file_path_sans_ext(basename(i))))
sapply(dir(pattern = ".tgz"), function(i) untar(tarfile = i, exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
sapply(dir(pattern = ".tgz"), function(i) untar(tarfile = i, exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
sapply(dir(pattern = ".tgz"), function(i) untar(i, exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
dir(pattern = ".tgz")
sapply((pattern = ".tgz"), function(i) untar(i, exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
file.path(pattern = ".tgz")
file.link(pattern = ".tgz")
file.list(pattern = ".tgz")
list.files(pattern = ".tgz"
list.files(pattern = ".tgz")
sapply((pattern = ".tgz"), function(i) untar(i, exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
list.files(pattern = ".tgz")
tools::file_path_as_absolute(list.files(pattern = ".tgz"))
tools::file_path_as_absolute(list)
tools::file_path_as_absolute(list[1])
sapply((pattern = ".tgz"), function(i) untar(tools::file_path_as_absolute(i), exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
sapply((pattern = ".tgz"), function(i) untar(tarfile = tools::file_path_as_absolute(i), exdir = file.path("./",tools::file_path_sans_ext(basename(i)))))
sapply((pattern = ".tgz"), function(i) untar(tarfile = tools::file_path_as_absolute(i))
sapply((pattern = ".tgz"), function(i) untar(tarfile = tools::file_path_as_absolute(i)))
sapply((pattern = ".tgz"), function(i) untar(tarfile = tools::file_path_as_absolute(i)))
sapply((pattern = ".tgz"), function(i) {untar(tarfile = tools::file_path_as_absolute(i))})
sapply((pattern = ".tgz"), function(i) {untar(tarfile = i)
sapply((pattern = ".tgz"), function(i) {untar(tarfile = i)})
sapply((pattern = ".tgz"), untar())
sapply((pattern = ".tgz"), untar)
sapply(dir(pattern = ".tgz"), untar)
sapply(dir(pattern = ".tgz"), untar)
)
sapply(dir(pattern = ".tgz"), untar)
sapply(list.files(pattern = ".tgz"), untar)
sapply(list.files(pattern = ".tgz"), untar)
lapply(list.files(pattern = ".tgz"), untar)
file = list.files()
file = list.files(pattern = ".tgz")
lapply(file, untar)
sapply(file, untar)
file =tools::file_path_as_absolute(pattern = ".tgz")
for (i in list)
{
file  <-  tools::file_path_as_absolute(i)
untar(file)
}
untar(file)
workDir <- "~/Share300sdb/Landsat8/N1"
setwd(workDir)
Dirs  <- c("L8_tars", "L8_tifs", "L8_outs")
sapply(Dirs,dir.create)
tarDir  <- "./L8_tars"
tifDir  <- "./L8_tifs"
tar  <- "*.tgz"
tarFiles_v <- list.files(path = tarDir, pattern = tar, all.files = T, full.names = T)
sapply(list, function(i) {untar(tarfile = i, exdir = file.path(getwd(),tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {untar(tarfile = i, exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
Sys.getenv("TAR"))
Sys.getenv("TAR")
untar("L8_tars/LC81050292013262LGN00.tgz")
untar("L8_tars/LC81050292013262LGN00)
)
""
untar("L8_tars/LC81050292013262LGN00")
untar("L8_tars/LC81050292013262LGN00")
untar("./L8_tars/LC81050292013262LGN00")
basename("./L8_tars/LC81050292013262LGN00.tgz")
sapply(tarFiles_v, function(i) {untar(tarfile = basename(i), exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {untar(tarfile = basename(i), exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
untar(tools::file_path_as_absolute(list[1]))
setwd("/home/tian/Share300sdb/Landsat8/N1/L8_tars/")
untar(tools::file_path_as_absolute(list[1]))
x  <- untar(tools::file_path_as_absolute(list[1]))
setwd("~/Landsat/L8_Hokkaido/")
setwd("/home/tian/Share300sdb/Landsat8/N1/L8_tars/")
workDir  <- getwd()
tarDir  <- "./L8_tars/"
tifDir  <- "./L8_tifs"
tar.gz  <- "*.tgz"
tars_l  <- list.files(path = tarDir, pattern = tar.gz, all.files = T, full.names = T)
setwd("/home/tian/Share300sdb/Landsat8/N1/")
workDir  <- getwd()
tarDir  <- "./L8_tars/"
tifDir  <- "./L8_tifs"
tar.gz  <- "*.tgz"
```
### List all tarball files in the input folder: tarDir
```{r listTarballs}
tars_l  <- list.files(path = tarDir, pattern = tar.gz, all.files = T, full.names = T)
setwd("/home/tian/Share300sdb/Landsat8/N1/")
workDir  <- getwd()
tarDir  <- "./L8_tars/"
tifDir  <- "./L8_tifs"
tar.gz  <- "*.tgz"
tars_l  <- list.files(path = tarDir, pattern = tar.gz, all.files = T, full.names = T)
lapply(tars_l, function(i) {untar(tarfile = i, exdir = tifDir)})
lapply(tars_l, function(i) {untar(tarfile = i, exdir = tifDir)})
url <- 'http://archive.ics.uci.edu/ml/databases/tic/tic.tar.gz'
file <- basename(url)
download.file(url, file)
untar(file, compressed = 'gzip', exdir = tmpdir )
list.files(tmpdir)
url <- 'http://archive.ics.uci.edu/ml/databases/tic/tic.tar.gz'
file <- basename(url)
download.file(url, file)
ls()
dir()
untar(file, compressed = 'gzip', exdir = tmpdir )
list.files(tmpdir)
utils::untar(file, compressed = 'gzip', exdir = tmpdir )
tmpdir <- tempdir()
utils::untar(file, compressed = 'gzip', exdir = tmpdir )
list.files(tmpdir)
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/L8_tars/copy2")
setwd("/home/tian/Share300sdb/Landsat8/N1/L8_tars/")
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/L8_tars/copy2")
for (i in list)
{
file  <-  tools::file_path_as_absolute(i)
untar(file)
}
utils::untar(file, compressed = 'gzip', exdir = tmpdir )
setwd("~/Share300sdb/Landsat8/N1/L8_tars/")
sapply(tarFiles_v, function(i) {untar(tarfile = basename(i), exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {utils::untar(tarfile = basename(i), exdir = file.path(outdir,tools::file_path_sans_ext(basename(i))))})
sapply(tarFiles_v, function(i) {utils::untar(tarfile = basename(i), exdir = file.path(".",tools::file_path_sans_ext(basename(i))))})
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/L8_tars/copy2")
rs.cptar(list = list, fromdir = getwd(), todir = "/home/tian/Share300sdb/Landsat8/N1/copy2")
library("tools", lib.loc="/usr/local/lib/R/library")
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
source('~/SparkleShare/TIR/R/rs.cptar.R', echo=TRUE)
l8list_raw  <- read.table("~/Dropbox/2data/dataRaw/LANDSAT_8_36801_lst.csv", sep =",")
l8list_sub  <- l8list_raw[,c(3,4,5,16,20,21,22,36,37)]
l8list_sub[,4] <-  gsub( "/", "",l8list_sub[,4])
colnames(l8list_sub) <- l8list_sub[1,]
l8list_ord <- l8list_sub[order(l8list_sub[,2],l8list_sub[,3],l8list_sub[,5],l8list_sub[,4]),]
View(`l8list_ord`)
View(`l8list_ord`)
View(`l8list_sub`)
View(`l8list_raw`)
library("teamlucc")
install.packages(c("class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv"), lib="/home/tian/SparkleShare/TIR/packrat/lib-R")
l8list_raw  <- read.table("~/Dropbox/2data/dataRaw/LANDSAT_8_36801_lst.csv", sep =",")
l8list_sub  <- l8list_raw[,c(3,4,5,16,20,21,22,36,37)]
View(`l8list_sub`)
View(`l8list_sub`)
colnames(l8list_sub) <- l8list_sub[1,]
View(`l8list_sub`)
col.names(l8list_sub) <- l8list_sub[1,]
names(l8list_sub) <- l8list_sub[1,]
View(`l8list_sub`)
l8list_raw  <- read.table("~/Dropbox/2data/dataRaw/LANDSAT_8_36801_lst.csv", sep =",")
l8list_sub  <- l8list_raw[,c(3,4,5,16,20,21,22,36,37)]
names(l8list_sub)
names(l8list_sub) <- l8list_sub[1,]
View(`l8list_sub`)
l8list_sub[1,]
l8list_sub[,4] <-  gsub( "/", "",l8list_sub[,4]))
names(l8list_sub) <-  as.character(l8list_sub[1,])
View(`l8list_sub`)
names(l8list_sub) <-  as.character(l8list_sub[1,])
names(l8list_sub) <-  as.character(l8list_sub[1,])
l8list_sub[,4] <-  gsub( "/", "",l8list_sub[,4]))
as.character(l8list_sub[1,])
as.character(l8list_sub[2,])
l8list_sub  <- l8list_raw[,c(3,4,5,16,20,21,22,36,37)]
as.character(l8list_sub[2,])
as.character(l8list_sub[0,])
as.character(l8list_sub[1])
l8list_sub
col.names(l8list_sub) <-
col.names(l8list_sub)
col.names(l8list_sub)
View(`l8list_sub`)
install.packages("teamlucc")
library(devtools)
install_github('azvoleff/teamlucc')
library(devtools)
install_github('azvoleff/teamlucc')
library(devtools)
install_github('azvoleff/teamlucc')
install.packages("Rcurl")
install.packages("RCurl")
library(teamlucc)
library(devtools)
install_github('azvoleff/teamlucc')
install.packages('devtools')
install.packages('devtools')
library(devtools)
install_github('azvoleff/teamlucc')
packrat::disable()
library("teamlucc")
library("teamlucc")
library("teamlucc")
ee_read <- function(x) {
scenes <- read.csv(x, stringsAsFactors=FALSE, quote=,
na.strings=c(NA,  ))
scenes$Sensor <- substr(scenes$Landsat.Scene.Identifier, 1, 3)
scenes$Sensor <- factor(scenes$Sensor)
yr_first <- grepl(^[0-9]{4}/, scenes$Date.Acquired)
yr_last <- grepl(/[0-9]{4}$, scenes$Date.Acquired)
if ((sum(yr_first) + sum(yr_last)) < nrow(scenes)) {
stop(unrecognized date format in Date.Acquired column)
}
acq_date <- as.Date(scenes$Date.Acquired)
acq_date[yr_first] <- as.Date(scenes$Date.Acquired[yr_first], %Y/%m/%d)
acq_date[yr_last] <- as.Date(scenes$Date.Acquired[yr_last], %m/%d/%Y)
scenes$Date.Acquired <- acq_date
scenes$Year <- as.numeric(format(scenes$Date.Acquired, %Y))
scenes$Month <- as.numeric(format(scenes$Date.Acquired, %m)) - .5
scenes$MonthFactor <- factor(format(scenes$Date.Acquired, %m))
scenes$Path_Row <- factor(paste(scenes$WRS.Path, scenes$WRS.Row, sep=/))
scenes$YearMonth <- paste(scenes$Year, scenes$MonthFactor, sep=/)
scenes$Frac_Clear <- (100 - scenes$Cloud.Cover) / 100
scenes <- scenes[order(scenes$WRS.Path, scenes$WRS.Row), ]
if (nrow(scenes) == 0) {
stop(paste0(no data found in, x,
- is scenes an EarthExplorer CSV export?))
}
scenes <- scenes[scenes$Data.Category == NOMINAL, ]
return(scenes)
}
ee_read <- function(x) {
scenes <- read.csv(x, stringsAsFactors=FALSE, quote=,
na.strings=c(NA,  ))
scenes$Sensor <- substr(scenes$Landsat.Scene.Identifier, 1, 3)
scenes$Sensor <- factor(scenes$Sensor)
yr_first <- grepl(^[0-9]{4}/, scenes$Date.Acquired)
yr_last <- grepl(/[0-9]{4}$, scenes$Date.Acquired)
if ((sum(yr_first) + sum(yr_last)) < nrow(scenes)) {
stop(unrecognized date format in Date.Acquired column)
}
acq_date <- as.Date(scenes$Date.Acquired)
acq_date[yr_first] <- as.Date(scenes$Date.Acquired[yr_first], %Y/%m/%d)
acq_date[yr_last] <- as.Date(scenes$Date.Acquired[yr_last], %m/%d/%Y)
scenes$Date.Acquired <- acq_date
scenes$Year <- as.numeric(format(scenes$Date.Acquired, %Y))
scenes$Month <- as.numeric(format(scenes$Date.Acquired, %m)) - .5
scenes$MonthFactor <- factor(format(scenes$Date.Acquired, %m))
scenes$Path_Row <- factor(paste(scenes$WRS.Path, scenes$WRS.Row, sep=/))
scenes$YearMonth <- paste(scenes$Year, scenes$MonthFactor, sep=/)
scenes$Frac_Clear <- (100 - scenes$Cloud.Cover) / 100
scenes <- scenes[order(scenes$WRS.Path, scenes$WRS.Row), ]
if (nrow(scenes) == 0) {
stop(paste0(no data found in, x,
- is scenes an EarthExplorer CSV export?))
}
scenes <- scenes[scenes$Data.Category == NOMINAL, ]
return(scenes)
}
ee_read <- function(x) {
scenes <- read.csv(x, stringsAsFactors=FALSE, quote=,
na.strings=c(NA,  ))
scenes$Sensor <- substr(scenes$Landsat.Scene.Identifier, 1, 3)
scenes$Sensor <- factor(scenes$Sensor)
yr_first <- grepl(^[0-9]{4}/, scenes$Date.Acquired)
yr_last <- grepl(/[0-9]{4}$, scenes$Date.Acquired)
if ((sum(yr_first) + sum(yr_last)) < nrow(scenes)) {
stop(unrecognized date format in Date.Acquired column)
}
acq_date <- as.Date(scenes$Date.Acquired)
library(teamlucc)
library(devtools)
ls
h = 6.626*10^-34
h
h = 6.626*10^-34
c = 2.998*10^8
j = 1.38*10^-23
a = hc/j
a = h*c/j
a
hkdmaskb  <- readRDS("~/SparkleShare/TIR/hkdmskb_grdi2d1h.Rds")
plot(hkdmaskbmaskb)
plot(hkdmaskb)
sp::plot(hkdmaskb)
phd.write.csv
r <- raster(ncols=12, nrows=12)
library(raster)
r <- raster(ncols=12, nrows=12)
set.seed(0)
r[] <- round(runif(ncell(r))*0.7 )
rc <- clump(r)
freq(rc)
plot(rc)
freq(rc)
rc
library(raster)
a = h*c/j
h = 6.626*10^-34
c = 2.998*10^8
j = 1.38*10^-23
a = h*c/j
a
hkdmaskb  <- readRDS("~/SparkleShare/TIR/hkdmskb_grdi2d1h.Rds")
300/(1+(10.9*300/0.0149)*log(0.98))
log(0.98)
log(1)
300/(1+(10.9*300/0.0149)*log(0.98))
300/((1+(10.9*300/0.0149)*log(0.98))
)
300/((1+(10.9*300/0.0149)*log(0.98)))
300/((1+(0.0000109*300/0.0149)*log(0.98)))
log(091:0.99)
log(0.91:0.99)
log(seq(0.91, 0.99, 0.01))
10.9e-6
10.9e-06
10.9e-06*300/1.48e-2
10.9e-06*300/1.48e-2*log(0.98)
10.9e-06*300/1.48e-2*log(0.99)
10.9e-06*300/1.48e-2*log(0.91)
plot(cars$dist~cars$speed)
plot(cars$dist~cars$speed, # y~x
main="Relationship between car distance & speed", #Plot Title
xlab="Speed (miles per hour)", #X axis title
ylab="Distance travelled (miles)", #Y axis title
xlim=c(0,30), #Set x axis limits from 0 to 30 ylim=c(0,140), #Set y axis limits from 0 to  30140  xaxs="i", #Set x axis style as internal
yaxs="i", #Set y axis style as internal
col="red", #Set the colour of plotting symbol to red
pch=19) #Set the plotting symbol to filled dots
#Recipe 2. Creating line graphs
sales  <- read.csv("dailysales.csv",header=TRUE)
plot(sales$units~as.Date(sales$date,"%d/%m/%y"),
type="l", #Specify type of plot as l for line
main="Unit Sales in the month of January 2010",
xlab="Date",
ylab="Number of units sold",
col="blue")
lines(sales$units2~as.Date(sales$date,"%d/%m/%y"),
col="red")
#Recipe 3. Creating bar charts
sales<-read.csv("citysales.csv",header=TRUE)
#Vertical bars
barplot(sales$ProductA,
names.arg= sales$City,
col="black")
#Horizontal bars
barplot(sales$ProductA,
names.arg= sales$City,
horiz=TRUE,
col="black")
#Grouped bars with legend
barplot(as.matrix(sales[,2:4]), beside= TRUE,
legend=sales$City,
col=heat.colors(5),
border="white")
#Horizontal grouped bars with legend
source("./tirSettings.R")
source("~/SparkleShare/TIR/demo/tirSettings.R")
??system
??OS
source('~/SparkleShare/TIR/demo/tirSettings.R', echo=TRUE)
source("~/SparkleShare/TIR/demo/tirSettings.R")
r <- raster(system.file("external/test.grd", package="raster"))
s <- stack(r, r*2)
layerNames(s) <- c('meuse', 'meuse x 2')
??layerName
layerNames(s) <- c('meuse', 'meuse x 2')
source("~/SparkleShare/TIR/demo/tirSettings.R")
layerNames(s) <- c('meuse', 'meuse x 2')
ls()
names(s) <- c('meuse', 'meuse x 2')
library(ggplot2)
theme_set(theme_bw())
gplot(s) + geom_tile(aes(fill = value)) +
facet_wrap(~ variable) +
scale_fill_gradient(low = 'white', high = 'blue') +
coord_equal()
data(meuse)
gplot(s) + geom_tile(aes(fill = value)) +
geom_point(data = meuse, aes(x,y)) +
facet_wrap(~ variable) +
scale_fill_gradient(low = 'white', high = 'blue') +
coord_equal()
gplot(s)
gplot(r) + geom_point(data = meuse, aes(x,y))
gplot(r) + geom_tile(aes(fill = value)) +geom_point(data = meuse, aes(x,y))
ggplot() + geom_raster(r)
ggplot() + gplot(r)
gplot(r)
gplot(r) + geom_raster()
source('~/.active-rstudio-document', echo=TRUE)
pp <- function (n,r=4) {
x <- seq(-r*pi, r*pi, len=n)
df <- expand.grid(x=x, y=x)
df$r <- sqrt(df$x^2 + df$y^2)
df$z <- cos(df$r^2)*exp(-df$r/6)
df
}
p <- ggplot(pp(20), aes(x=x,y=y))
p + geom_tile() #pretty useless!
# Add aesthetic mappings
p + geom_tile(aes(fill=z))
p + geom_tile(aes(fill=z)) + scale_fill_gradient(low="green", high="red")
qplot(x, y, data=pp(20), geom="tile", fill=z)
qplot(x, y, data=pp(100), geom="tile", fill=z)
p <- ggplot(pp(20)[sample(20*20, size=200),], aes(x=x,y=y,fill=z))
p + geom_tile()
image(t(volcano)[ncol(volcano):1,])
library(reshape2) # for melt
ggplot(melt(volcano), aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cars <- ggplot(mtcars, aes(y=factor(cyl), x=mpg))
cars + geom_point()
cars + stat_bin(aes(fill=..count..), geom="tile", binwidth=3, position="identity")
cars + stat_bin(aes(fill=..density..), geom="tile", binwidth=3, position="identity")
cars + stat_density(aes(fill=..density..), geom="tile", position="identity")
cars + stat_density(aes(fill=..count..), geom="tile", position="identity")
# Another example with with unequal tile sizes
x.cell.boundary <- c(0, 4, 6, 8, 10, 14)
example <- data.frame(
x = rep(c(2, 5, 7, 9, 12), 2),
y = factor(rep(c(1,2), each=5)),
z = rep(1:5, each=2),
w = rep(diff(x.cell.boundary), 2)
)
qplot(x, y, fill=z, data=example, geom="tile")
qplot(x, y, fill=z, data=example, geom="tile", width=w)
qplot(x, y, fill=factor(z), data=example, geom="tile", width=w)
# You can manually set the colour of the tiles using
# scale_manual
col <- c("darkblue", "blue", "green", "orange", "red")
qplot(x, y, fill=col[z], data=example, geom="tile", width=w, group=1) +
scale_fill_identity(labels=letters[1:5], breaks=col)
[Package ggplot2 version 1.0.0 Index]
scatterhist = function(x, y, xlab="", ylab="", ...){
if(missing(y) & ncol(x)==2) {
y <- x[,2]
x <- x[,1]
}
zones=matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(zones, widths=c(4/5,1/5), heights=c(1/5,4/5))
xhist = hist(x, plot=FALSE)
yhist = hist(y, plot=FALSE)
top = max(c(xhist$counts, yhist$counts))
par(mar=c(3,3,1,1))
plot(x,y, ...)
par(mar=c(0,3,1,1))
barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0)
par(mar=c(3,0,1,1))
barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE)
par(oma=c(3,3,0,0))
mtext(xlab, side=1, line=1, outer=TRUE, adj=0,
at=.8 * (mean(x) - min(x))/(max(x)-min(x)))
mtext(ylab, side=2, line=1, outer=TRUE, adj=0,
at=(.8 * (mean(y) - min(y))/(max(y) - min(y))))
}
library(copula)
copGumb <- gumbelCopula(3)
copGumbSmpl <- rCopula(500,copGumb)
pdf("TeX/figures/copGumbSmpl.pdf",width=4, height=4)
scatterhist(copGumbSmpl, asp=1)
dev.off()
normSmpl <- qnorm(copGumbSmpl)
pdf("TeX/figures/normSmpl.pdf",width=4, height=4)
source('~/Dropbox/1code/01_R/10_ggplot/ggplotProfiles.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#placeholder plot - prints nothing at all
empty <- ggplot()+geom_point(aes(1,1), colour="white") +
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
#scatterplot of x and y variables
scatter <- ggplot(xy,aes(xvar, yvar)) +
geom_point(aes(color=zvar)) +
scale_color_manual(values = c("orange", "purple")) +
theme(legend.position=c(1,1),legend.justification=c(1,1))
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(xvar, fill=zvar)) +
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2);
library(grid);
data(iris)
x <- jitter(iris[,c('Sepal.Length')])
y <- jitter(iris[,c('Sepal.Width')])
z <- factor(iris[,c('Species')])
cbnbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
df<-data.frame(x,y,z) # just create a dataframe - x y and z are easier to write than Petal.length and so on
# I now define the (gg)plots
# old p1 and p2 (..density.. plots)...
# p1<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = x, y = -..density..), col='black', fill="#CCCCCC") + geom_density(aes(x = x, y = ..density.., fill = subsp, alpha=0.4)) +theme_invisible() + opts(legend.position = "none")
# p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..density..), col='black', fill="#CCCCCC") + geom_density(aes(x = y, y = ..density.., fill = subsp, alpha=0.4)) +theme_invisible() + opts(legend.position = "none") +coord_flip()
# now susbstituted by ..count.. plots as suggested by Andrew in comments
p1<-ggplot(df) # based on the dataframe just defined
+ scale_fill_manual(values=cbnbPalette) # using the colorblind-friendly palette
+ geom_density(aes(x = x, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") # overall density plot - plotted on the negative
p1<-ggplot(df) # based on the dataframe just defined
+ scale_fill_manual(values=cbnbPalette) # using the colorblind-friendly palette
p1<-ggplot(df) # based on the dataframe just defined
+ scale_fill_manual(values=cbnbPalette) # using the colorblind-friendly palette
+ geom_density(aes(x = x, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") # overall density plot - plotted on the negative
p1<-ggplot(df) +  # based on the dataframe just defined
scale_fill_manual(values=cbnbPalette) # using the colorblind-friendly palette
p1<-ggplot(df) +  # based on the dataframe just defined
scale_fill_manual(values=cbnbPalette) + # using the colorblind-friendly palette
geom_density(aes(x = x, y = -..count.., col=subsp),
fill="#CCCCCCCC", position = "stack") + # overall density plot - plotted on the negative
geom_density(aes(x = x, y = ..count.., fill = subsp, alpha=0.4)) +  # so as to be specular to the densities by subspecies
theme_invisible() # oh yeah, I don't want any other graphical element to crowd this plot - the x axys is the same as in the main plot
p1<-ggplot(df) +  # based on the dataframe just defined
scale_fill_manual(values=cbnbPalette) + # using the colorblind-friendly palette
geom_density(aes(x = x, y = -..count.., col=subsp),
fill="#CCCCCCCC", position = "stack") + # overall density plot - plotted on the negative
geom_density(aes(x = x, y = ..count.., fill = subsp, alpha=0.4)) +  # so as to be specular to the densities by subspecies
theme_invisible() # oh yeah, I don't want any other graphical element to crowd this plot - the x axys is the same as in the main plot
+ opts(legend.position = "none")
# this is a second density plot, oriented vertically (hence the 'coord_flip()' at the end
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = subsp, alpha=0.4)) +theme_invisible() + opts(legend.position = "none") +coord_flip()
#finally the main x/y plot - nothing to write home about
p3<- ggplot(df) + scale_colour_manual(values=cbbPalette) + geom_point(aes(x = x, y = y, col=subsp)) + opts(legend.position = c(1.2,1.2))
#now let's print the plot to screen!
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp=vplayout(1,1:4)) # the first density plot will occupy the top of the grid
print(p3, vp=vplayout(2:5,1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp=vplayout(2:5,5)) # with the second density plot occupying a narrow vertical strip at the right
# done! Enjoy!
library(spatstat)
X <- with(dataset3, ppp(x,y, window=owin(c(0,150),c(0,260))))
library(spatstat)
X <- with(dataset3, ppp(x,y, window=owin(c(0,150),c(0,260))))
plot(density(X, 25))
library(spatstat)
X <- with(dataset, ppp(x,y, window=owin(c(0,150),c(0,260))))
plot(density(X, 25))
data(spatstat)
data(package = "spatstat")
colfunc <- colorRampPalette(c("darkblue", "lightblue", "green", "yellow", "red"))
library(ggplot2)
ggplot(dataset2, aes(x, y)) +
stat_density2d(geom="tile", aes(fill = ..density..), contour = FALSE) +
scale_fill_gradientn(colours=colfunc(400)) +
xlim(c(15, 155)) + ylim(c(130, 270)) +
geom_density2d(colour="black", bins=10) +
geom_point() +
geom_text(aes(label=contesto), size=3, hjust=-.25, vjust=.75) +
guides(fill = guide_colorbar(barwidth = 0.5, barheight = 10)) +
theme(legend.title=element_blank())
ggplot(dataset2, aes(x, y)) +
stat_density2d(geom="tile", aes(fill = ..density..), contour = FALSE) +
scale_fill_gradientn(colours=colfunc(400)) +
xlim(c(15, 155)) + ylim(c(130, 270)) +
geom_density2d(colour="black", bins=10) +
geom_point() +
geom_text(aes(label=contesto), size=3, hjust=-.25, vjust=.75) +
guides(fill = guide_colorbar(barwidth = 0.5, barheight = 10)) +
theme(legend.title=element_blank())
scatterhist = function(x, y, xlab="", ylab=""){
zones=matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(zones, widths=c(4/5,1/5), heights=c(1/5,4/5))
xhist = hist(x, plot=FALSE)
yhist = hist(y, plot=FALSE)
top = max(c(xhist$counts, yhist$counts))
par(mar=c(3,3,1,1))
plot(x,y)
par(mar=c(0,3,1,1))
barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0)
par(mar=c(3,0,1,1))
barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE)
par(oma=c(3,3,0,0))
mtext(xlab, side=1, line=1, outer=TRUE, adj=0,
at=.8 * (mean(x) - min(x))/(max(x)-min(x)))
mtext(ylab, side=2, line=1, outer=TRUE, adj=0,
at=(.8 * (mean(y) - min(y))/(max(y) - min(y))))
}
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
with(ds, scatterhist(mcs, pcs, xlab="MCS", ylab="PCS"))
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
# http://stackoverflow.com/questions/17370460/scatterplot-with-alpha-transparent-histograms-in-r
library(ggplot2)
library(gridExtra)
set.seed(42)
DF <- data.frame(x=rnorm(100,mean=c(1,5)),y=rlnorm(100,meanlog=c(8,6)),group=1:2)
p1 <- ggplot(DF,aes(x=x,y=y,colour=factor(group))) + geom_point() +
scale_x_continuous(expand=c(0.02,0)) +
scale_y_continuous(expand=c(0.02,0)) +
theme_bw() +
theme(legend.position="none",plot.margin=unit(c(0,0,0,0),"points"))
theme0 <- function(...) theme( legend.position = "none",
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.margin = unit(0,"null"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.length = unit(0,"null"),
axis.ticks.margin = unit(0,"null"),
panel.border=element_rect(color=NA),...)
p2 <- ggplot(DF,aes(x=x,colour=factor(group),fill=factor(group))) +
geom_density(alpha=0.5) +
scale_x_continuous(breaks=NULL,expand=c(0.02,0)) +
scale_y_continuous(breaks=NULL,expand=c(0.02,0)) +
theme_bw() +
theme0(plot.margin = unit(c(1,0,0,2.2),"lines"))
p3 <- ggplot(DF,aes(x=y,colour=factor(group),fill=factor(group))) +
geom_density(alpha=0.5) +
coord_flip()  +
scale_x_continuous(labels = NULL,breaks=NULL,expand=c(0.02,0)) +
scale_y_continuous(labels = NULL,breaks=NULL,expand=c(0.02,0)) +
theme_bw() +
theme0(plot.margin = unit(c(0,1,1.2,0),"lines"))
grid.arrange(arrangeGrob(p2,ncol=2,widths=c(3,1)),
arrangeGrob(p1,p3,ncol=2,widths=c(3,1)),
heights=c(1,3))
require(raster)
require(sp)
r = raster(volcano)
extent(r) = c(-2,1,50,54)
crs(r) = CRS('+proj=longlat +datum=WGS84')
plot(r, asp=T)
pts = data.frame(name=c('A','B','C','D'), lon=c(-1.5,-0.5,0,0.5), lat=c(51,52,53,53.8))
coordinates(pts) = ~ lon + lat
plot(pts, add=T)
path = list()
for(i in 2:4) path[[i-1]] = Line(pts[(i-1):i,])
path = SpatialLines(list(Lines(path, ID = 'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
plot(path, add=T)
topo_profile = extract(x=r, y=path, along=TRUE)[[1]]
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id')))
plot(path, add=T)
for(i in 2:4) path[[i-1]] = Line(pts[(i-1):i,])
path = SpatialLines(list(Lines(path, ID = 'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id')))
path = list()
for(i in 2:4) path[[i-1]] = Line(pts[(i-1):i,])
require raster
require rgdal
require raster
require (raster)
require (rgdal)
r <- raster('dem.tif')
r = raster(volcano)
pts = data.frame(name=c('A','B','C','D'), lon=c(-1.5,-0.5,0,0.5), lat=c(51,52,53,53.8))
coordinates(pts) = ~ lon + lat
plot(pts, add=T)
path = list()
for(i in 2:4) path[[i-1]] = Line(pts[(i-1):i,])
path = SpatialLines(list(Lines(path, ID = 'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
plot(path, add=T)
extract(r, path)
r <- raster(ncol=36, nrow=18)
r[] <- 1:ncell(r)
r <- raster(ncol=36, nrow=18)
r[] <- 1:ncell(r)
cds1 <- rbind(c(-50,0), c(0,60), c(40,5), c(15,-45), c(-10,-25))
cds2 <- rbind(c(80,20), c(140,60), c(160,0), c(140,-55))
lines <- SpatialLines(list(Lines(list(Line(cds1)), "1"), Lines(list(Line(cds2)), "2") ))[1] # only 1 line!
plot(r)
lines(lines)
x11()
plot(extract(r, lines)[[1]]) # following the line the values should be sorted differently.
plot(extract(r, lines)[[1]], type = "l") # following the line the values should be sorted differently.
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id'))), proj4string=CRS('+proj=longlat +datum=WGS84'))
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id')))
path = SpatialLines(list(Lines(Line(pts[,2:3]),ID = 'id')))
path = list()
path = SpatialLines(list(Lines(Line(pts[,2:3]),ID = 'id')))
for(i in 2:3) path[[i-1]] = Line(pts[(i-1):i,])
# path = SpatialLines(list(Lines(path, ID = 'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
path = SpatialLines(list(Lines(Line(pts[,2:3]),'id')), proj4string=CRS('+proj=longlat +datum=WGS84'))
path = SpatialLines(list(Lines(Line(pts[,2:3])'id')))
plot(path, add=T)
extract(r, path)
library(raster)
library(sp)
set.seed(2)
data(volcano)
r <- raster(volcano)
plot(r)
l1 = cbind(c(seq(0,1 , by = 0.1)), runif(11, 0, 1))
S1 = Lines(list(Line(l1)), ID = "a")
lines(S1, asp = 1, col = "red")
elevations <- extract(r, lines)
plot(elevtions)
elevations <- extract(r, lines)
plot(elevations)
plot(elevations, type = "l")
elevations
plot(elevations[[1]], type = "l")
library(raster)
r <- raster(matrix(1:20, nrow=4))
l <- SpatialLines(list(Lines(list(Line(list(x=c(0, 1), y=c(0, 1)))), ID=1)))
plot(r, asp=1); lines(l)
a <- extract(r, l, cellnumbers=T)[[1]]
rc <- rowColFromCell(r, a[,1])
b <- cbind(rc, value=a[,2])
#order top to bottom
b[order(-b[,1], b[,2]), 3]
#order bottom to top
b[order(b[,1], -b[,2]), 3]
# or
rev( b[order(-b[,1], b[,2]), 3] )
