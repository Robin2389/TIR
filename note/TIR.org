#+PROPERY: tangle no
#+TODO: TODO(!) CODE(!) DEMO(!) | DONE(!) NEXT(!)
TIR(idList) Object: 1 click get all results from a list
* Credits and Source code Pool
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
| R Packages         | Creator          | Version | Started          | Last Update | Maintainer and  Authors | Source code |
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
| raster             |                  |         |                  |             |                         |             |
| sp                 |                  |         |                  |             |                         |             |
| rgdal              |                  |         |                  |             |                         |             |
| landsat            |                  |    1.08 |                  |             |                         |             |
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
| [[https://github.com/bleutner/RStoolbox][RStoolbox]]          | [[https://github.com/bleutner][Benjamin Leutner]] |    0.02 | [2014-05-06 Tue] |             |                         |             |
| [[https://github.com/Terradue/rLandsat8][rLandsat8]]          | [[https://github.com/Terradue][Terradue]]         |         |                  |             |                         |             |
| [[https://github.com/Terradue/dcs-r-landsat8-thermal][L8Thermal]]          | [[https://github.com/Terradue][Terradue]]         |         |                  |             |                         |             |
| [[https://github.com/azvoleff/teamlucc][teamlucc]]           | [[https://github.com/azvoleff][Alex Zvoleff]]     |         |                  |             |                         |             |
| [[https://github.com/ConservationInternational/teamcode][teamcode]]           | [[https://github.com/azvoleff][Alex Zvoleff]]     |         |                  |             |                         |             |
| [[https://github.com/azvoleff/wrspathrow][wrspathrow]]         | [[https://github.com/azvoleff][Alex Zvoleff]]     |         |                  |             |                         |             |
| [[https://github.com/azvoleff/Landsat_Processing][Landsat-Processing]] | [[https://github.com/azvoleff][Alex Zvoleff]]     |    code |                  |             |                         |             |
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
| Python Code        |                  |         |                  |             |                         |             |
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
|                    |                  |         |                  |             |                         |             |
|                    |                  |         |                  |             |                         |             |
|                    |                  |         |                  |             |                         |             |
|--------------------+------------------+---------+------------------+-------------+-------------------------+-------------|
* Workfolw of The TIR

#+NAME: fig:TIRworkflow
#+HEADER: :cache yes :tangle yes :exports none
#+HEADER: :results output graphics
#+BEGIN_SRC dot :file ./Figures/TIRWorkflow.png 
  digraph {
  node [shape = box]
  dir [label = "Directories"]
  driver [label = "Driver Root \n OS based"]
  satellite [label = "Main Dir \n Satellite Name"]
  L0 [label = "at0_Sensor"]
  L1 [label = "at1_TOA"]
  L2 [label = "at2_Surface"]
  L3 [label = "at3_Index"]
  L4 [label = "at4_Model"]
  L5 [label = "at5_Paper"]
  L6 [label = "at6_Products"]
  dir -> L0 -> L1 -> L2 -> L3 -> L4 -> L5 -> L6 [color = red]
  {rank =same; dir, L0, L1, L2, L3, L4, L5, L6 [style = filled, color = gold]}
  dir -> "driver" -> "satellite"
  L0 -> "dir.tar" -> "dir.tif"
  "dir.tmp" -> L1 -> "dir.toaRad" -> {"dir.toaRef","dir.toaBT"}
  "dir.toaRef" -> "dir.toaRefSun" -> "dir.toaRefSunPixel"
  "dir.toaBT" -> "dir.mapBT"
  "dir.DEM" -> L2 -> "dir.corAtmospher" -> "dir.corTerrain" -> "dir.corEmissivity" -> "dir.corUnderGroud"
   L3 -> "dir.VI" -> "dir.NDVI"
  "dir.GIS" -> L4 -> "dir.LUCC"
   L5 -> "dir.Figures"
  }
#+END_SRC

#+RESULTS[38fb0af01600f04d37c99f7ac56107b14fd74e34]: fig:TIRworkflow
[[file:./Figures/TIRWorkflow.png]]
* R and Demo
** At Sensor
*** DEMO rs.untar1
- State "DEMO"       from "CODE"       [2014-09-18 Thu 14:22]
- State "CODE"       from ""           [2014-09-18 Thu 14:22]
#+HEADER: :tangle ~/SparkleShare/TIR/R/rs.untar1.R
#+BEGIN_SRC R
  rs.untar  <- function(list, path = ".", outdir = "../tif", pattern = ".tgz") {
          tarFiles_v <- list.files(path = path, pattern = pattern, all.files = T, full.names = T) 
          sapply(tarFiles_v, function(i) {utils::untar(tarfile = i, exdir = file.path(outdir, tools::file_path_sans_ext(basename(i))))})
  }
#+END_SRC

*** DONE rs.untar:: untar file in the list to sceneDir
- State "DONE"       from "DEMO"       [2014-09-18 Thu 14:50]
- State "DEMO"       from "CODE"       [2014-09-18 Thu 14:22]
- State "DONE"       from "DOING"      [2014-09-16 Tue 15:26]
- State "DOING"      from "TODO"       [2014-09-16 Tue 15:26]
- 
**** Code
#+HEADER: :tangle ~/SparkleShare/TIR/R/rs.untar.R
#+BEGIN_SRC R 
  #' Select and untar files in the list form tar dir to tif dir 
  #' @param list like LC81050292013262LGN00.tgz or LC81050292013262LGN00.tar.gz
  #' @param formdir folders contain the Image usrally the download or database
  #' @param todir  Where the files will copy to, usually the workdir
  rs.untar <- function(list, fromdir, todir){
          if (all(list %in% dir(fromdir))){
                  sapply(list, function(i) {
                          sceneDir <-file.path(tools::file_path_as_absolute(todir), gsub(pattern = "(^[^.]+)(.*)", replacement = "\\1", i))
                          utils::untar(tarfile = file.path(tools::file_path_as_absolute(fromdir),i), exdir = sceneDir)
                  })
            } else {
                    stop (paste("Not all the files in", fromdir, "Use rs.todown to check it!"))
            }
  }
#+END_SRC
**** Demo
#+HEADER: :tangle ../demo/rs01_untarLandsat8.R
#+BEGIN_SRC R 
worklist  <- paste0(hkdMinCloud$ID,".tgz")
dir.tar  <- "~/Share300sdb/Landsat8/N0/LISTEJapan"
dir.tif  <- "~/Share500sda/Landsat8/at0_Sensor"
rs.untar(worklist, fromdir = dir.tar, todir = dir.tif)
#+END_SRC 

**** Code Note
.tgz test ok
.tar.gz get the wrong basename identifire.tar
tips:
: utils::untar, some time untar not work
: tools::file_path_as_absolute, untar also need absolute path if workdir not specified 
: basename not work for .tar.gz so use gsub
: untar need time
#+BEGIN_EXAMPLE
  file.copy(file.path(fromdir,i), todir)
  utils::untar(tarfile = file.path(todir,i), exdir = file.path(todir,tools::file_path_sans_ext(basename(i))))
  utils::untar(tarfile = file.path(todir,i), exdir = file.path(todir, gsub(pattern = "(^[^.]+)(.*)", replacement = "\\1", i)))
  file.remove(file.path(todir,i))
for (i in list){
utils::untar(tarfile = file.path(fromdir,i), exdir = file.path(tools::file_path_as_absolute(todir), gsub(pattern = "(^[^.]+)(.*)", replacement = "\\1", i)))
}
#+END_EXAMPLE

*** DONE rs.todown:: data need to download from list
- State "DONE"       from "DEMO"       [2014-09-18 Thu 14:56]
- State "DEMO"       from "CODE"       [2014-09-18 Thu 14:21]
- State "CODE"       from ""           [2014-09-18 Thu 14:21]
- State "DONE"       from "DOING"      [2014-09-15 Mon 16:24]
**** Code
#+HEADER: :tangle ~/SparkleShare/TIR/R/rs.todown.R
#+BEGIN_SRC R
  rs.todown <- function(list, downeddir, tolistName){
          downedFiles  <- list.files(downeddir)
          todownList   <-  setdiff(list, downedFiles)
          Now <- format(Sys.time(), "_%y%m%d_%H%M%S")
          todownListName <- paste0(todownListName, Now, ".txt")
          write.table(todownList , todownListName, quote = F, row.names = F,col.names = F)
  }
#+END_SRC
**** Demo
#+HEADER: :tangle ../demo/rs02_todownlist.R
#+BEGIN_SRC R 
rs.todown()
worklist  <- paste0(hkdMinCloud$ID,".tgz")
dir.tar  <- "~/Share300sdb/Landsat8/N0/LISTEJapan"
rs.todown(worklist, dir.tar, "todown")
#+END_SRC 

*** SOMEDAY rs.minCloud
*** SOMEDAY rs.bestSesson
*** SOMEDAY rs.shortBaseline
** At TOA
*** DEMO rs.readL8 Read Landsat8
- State "DEMO"       from "DONE"       [2014-09-18 Thu 14:21]
- State "DONE"       from "DOING"      [2014-09-16 Tue 22:50]
- State "DOING"      from "TODO"       [2014-09-16 Tue 22:50]
- State "TODO"       from ""           [2014-09-16 Tue 17:48]
#+HEADER: :tangle ~/SparkleShare/TIR/R/rs.readL8.R
#+BEGIN_SRC R
  #' Reads a Landsat 8 product
  #' @description Reads a Landsat 8 product
  #'
  #' @param product name of the product, e.g. LC80522102014165LGN00. It must be in the working directory
  #' @return list with metadata and raster bands
  #' @examples \dontrun{
  #' ReadLandsat8("LC80522102014165LGN00")
  #' }
  #'
  #' @note  ReadLandsat8 Function orignally from Package rLandsat8
  #'
  #' @export
  #' @import raster

  ReadLandsat8 <- function(product) {

    raster.files <- list("aerosol"="file_name_band_1",
      "blue"="file_name_band_2",
      "green"="file_name_band_3",
      "red"="file_name_band_4",
      "nir"="file_name_band_5",
      "swir1"="file_name_band_6",
      "swir2"="file_name_band_7",
      "panchromatic"="file_name_band_8",
      "cirrus"="file_name_band_9",
      "tirs1"="file_name_band_10",
      "tirs2"="file_name_band_11"
      )

    meta.file <- paste0(product, "/", product, "_MTL.txt")

    if (!file.exists(meta.file))
         stop(paste(meta.file, "file not found."))

    textLines <- readLines(meta.file)

    counts <- count.fields(textConnection(textLines), sep="=")

    met <- read.table(text=textLines[counts == 2], as.is=TRUE, header=FALSE, sep="=", strip.white=TRUE, stringsAsFactors=FALSE)

    met <- read.table(text=textLines[counts == 2], as.is=TRUE, header=FALSE, sep="=", strip.white=TRUE, stringsAsFactors=FALSE, row.names = NULL, col.names=c("name", "value"))

    met <- met[!met$name == "GROUP", ]
    met <- met[!met$name == "END_GROUP", ]
    rownames(met) <- tolower(met[, "name"])
    met[, "name"] <- NULL

    met <- as.list(as.data.frame(t(met), stringsAsFactors=FALSE))

    bands=lapply(raster.files, function(x) {
      r <- raster(paste0(product, "/", met[[x]]))
      r@title <- names(raster.files)[seq_along(raster.files)[sapply(raster.files, function(a) x %in% a)]]
      NAvalue(r) <- 0
      return(r)
    })

    return(list(metadata=met,
      band=bands)
    )
  }
  require(raster)
  rs.readL8 <- ReadLandsat8


#+END_SRC

*** CODE rs.DNtoTOARadiance
- State "CODE"       from "DEMO"       [2014-09-18 Thu 14:22]
**** Reference DNtoTOARadiance
- State "CODE"       from ""           [2014-09-18 Thu 14:21]

#+BEGIN_SRC R
  library(raster)
  l8.lst  <- lapply(dir(dir.tif), ReadLandsat8)
  dir.toaRad  <- "~/Share500sda/Landsat8/at1_TOA/toaRad/"
  bandnames <-c("aerosol", "blue", "green", "red",
       "nir", "swir1", "swir2",
       "panchromatic",
       "cirrus",
       "tirs1", "tirs2")
  for(i in l8.lst) {
    sceneName  <- i$metadata$landsat_scene_id
    for(j in bandnames){
       idx <- seq_along(bandnames)[sapply(bandnames, function(x) j %in% x)] # a number
       bandidx <- ("file_name_band_", idx)
       grepl(i$metadata, bandidx)
       bandName <-   i$metadata$paste0
       Rad.rst  <- ToTOARadiance(i, j)
       writeRaster(Rad.rst, filename = file.path(dir.toaRad, sceneName, bandName), overwrite = T)
      }
  }


#+END_SRC
**** Code

**** Demo
#+HEADER: :tangle ../demo/rs10_DNtoTOARadiance.R
#+BEGIN_SRC R 
  sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
  sourceDir("~/SparkleShare/TIR/R/")
  driver     <- "D://tian/Landsat8/"      # Windows
  driver     <- "~/Share500sda/Landsat8/" # Linux
  dir.tif    <- file.path(driver, "at0_Sensor")
  dir.toaRad <- file.path(driver, "at1_TOA/toaRad")
  dir.tmp    <- file.path(driver, "raster_tmp")
  rasterOptions(tmpdir = dir.tmp)  
  library(raster)
  setwd(dir.tif)  ## very important tips for use rLandsat8
  ## files  <- sapply(file.path(dir.tif,list.files(dir.tif)), tools::file_path_as_absolute)
  ## basename(files)
  ## l8.lst  <- lapply(basename(files), ReadLandsat8)
  l8.lst   <- lapply(dir(dir.tif), ReadLandsat8)
  bandnames <-c("aerosol", "blue", "green", "red",
                "nir", "swir1", "swir2",
                "panchromatic",
                "cirrus",
                "tirs1", "tirs2")
  for (i in l8.lst) {
          sceneName  <- i$metadata$landsat_scene_id
          if (!file.exists(file.path(dir.toaRad, sceneName))) {
                  dir.create(file.path(dir.toaRad, sceneName), recursive = T)
          }
          for(j in bandnames){
                  idx <- seq_along(bandnames)[sapply(bandnames, function(x) j %in% x)] # a number
                  bandidx <- paste0("file_name_band_", idx)
                  bandName <-  sapply(i, "[[", bandidx)[[1]]
                  pngName <- paste0(bandName, ".png")
                  #fileName <- paste0(tools::file_path_sans_ext(bandName), "_TOARad.tif")               
                  Rad.rst  <- ToTOARadiance(i, j)
                  writeRaster(Rad.rst, filename = file.path(dir.toaRad, sceneName,
                                       bandName), overwrite = T)
                  png(filename = file.path(dir.toaRad, sceneName, pngName))
                  par(family = "times")
                  plot(Rad.rst, main = paste0("Radiance at TOA of Band ",idx, "\n",
                                expression(paste("[", W*sr^-1*m^-2*mu*m^-1, "]"))))
                  dev.off()
                  raster::removeTmpFiles(h = 0.5) ## Improtant tips for save hardisk
          }
  }

#+END_SRC 

#+RESULTS:

*** CODE l8.DNtoTOARadiance
**** refercode rLandsat8::ToTOARadiance
#+HEADER: :tangle ~/SparkleShare/TIR/R/l8.DNtoTOARadiance.R
#+BEGIN_SRC R
   #' creates a raster with the TOA radiance 
   #' @description Creates a raster with the TOA radiance
   #'
   #' @param landsat8 list returned by rLandsat8::ReadLandsat8
   #' @param band Landsat 11 bandname (one of "aerosol", "blue", "green", "red", "nir", "swir1", "swir2", "panchromatic", "cirrus", "tirs1", "tirs2" 
   #' @return TOA Radiance raster
   #' @examples \dontrun{
   #' ls8 <- ReadLandsat8("LC81880342014174LGN00")
   #' r <- ToTOARadiance(ls8, "red")
   #' }
   #' @note form rLandsat8
   #' @export
   #' @import raster

   ToTOARadiance <- function(landsat8, band) {

     bandnames <-c("aerosol", "blue", "green", "red",
     "nir", "swir1", "swir2",
     "panchromatic",
     "cirrus",
     "tirs1", "tirs2")
     
     allowedbands <- bandnames
     
     if (!band %in% allowedbands)
     {
          stop(paste(band, "band not allowed"))
     }
     
     idx <- seq_along(bandnames)[sapply(bandnames, function(x) band %in% x)]

     ml <- as.numeric(landsat8$metadata[[paste0("radiance_mult_band_",idx)]])
     al <- as.numeric(landsat8$metadata[[paste0("radiance_add_band_",idx)]])
     
     TOArad <- landsat8$band[[band]] * ml + al
     
     return(TOArad)
     
   }

   ## Add new
   l8.DNtoTOARadiance <- function(idenfier){
  bandnames <-c("aerosol", "blue", "green", "red",
     "nir", "swir1", "swir2",
     "panchromatic",
     "cirrus",
     "tirs1", "tirs2")
     
     sapply(bandnames, function(i){ToTOARadiance(idenfier, i)}) 
   }

#+END_SRC


#+HEADER: :tangle ~/SparkleShare/TIR/R/rs.readL8.R
#+BEGIN_SRC R

#+END_SRC

**** refercode
**** Code
**** Demo

*** CODE DNtoTOAReflectance
- State "CODE"       from ""           [2014-09-18 Thu 15:16]

**** Code
**** Demo
#+HEADER: :tangle ../demo/rs11_DNtoTOAReflectance.R
#+BEGIN_SRC R 
  source("~/SparkleShare/Rprofile/R/sourceDir.R")
  sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
  sourceDir("~/SparkleShare/TIR/R/")
  dir.tif  <- "~/Share500sda/Landsat8/at0_Sensor"
  dir.toaRef  <- "~/Share500sda/Landsat8/at1_TOA/toaRef"
  dir.tmp <- "~/Share500sda/Landsat8/raster_tmp"
  library(raster)
  rasterOptions(tmpdir = dir.tmp)  

  setwd(dir.tif)  ## very important tips for use rLandsat8
  ## files  <- sapply(file.path(dir.tif,list.files(dir.tif)), tools::file_path_as_absolute)
  ## basename(files)
  ## l8.lst  <- lapply(basename(files), ReadLandsat8)
  l8.lst   <- lapply(dir(dir.tif), ReadLandsat8)
  bandnames <-c("aerosol", "blue", "green", "red",
                "nir", "swir1", "swir2",
                "panchromatic",
                "cirrus")
  for (i in l8.lst) {
          sceneName  <- i$metadata$landsat_scene_id
          if (!file.exists(file.path(dir.toaRef, sceneName))) {
                  dir.create(file.path(dir.toaRef, sceneName), recursive = T)
          }
          for(j in bandnames){
                  idx <- seq_along(bandnames)[sapply(bandnames, function(x) j %in% x)] # a number
                  bandidx <- paste0("file_name_band_", idx)
                  bandName <-  sapply(i, "[[", bandidx)[[1]]
                  # fileName <- paste0(tools::file_path_sans_ext(bandName), "_TOARef.tif")
                  Ref.rst  <- ToTOAReflectance(i, j)
                  writeRaster(Ref.rst, filename = file.path(dir.toaRef, sceneName, bandName), overwrite = T)
                  raster::removeTmpFiles(h = 0.5) ## Improtant tips for save hardisk
          }
  }

#+END_SRC 



**** Demo2
#+HEADER: :tangle ../demo/rs12_DNtoTOAReflectanceSun.R
#+BEGIN_SRC R 
  source("~/SparkleShare/Rprofile/R/sourceDir.R")
  sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
  sourceDir("~/SparkleShare/TIR/R/")
  dir.tif  <- "~/Share500sda/Landsat8/at0_Sensor"
  dir.toaRefSun  <- "~/Share500sda/Landsat8/at1_TOA/toaRefSun"
  dir.tmp <- "~/Share500sda/Landsat8/raster_tmp"
  library(raster)
  rasterOptions(tmpdir = dir.tmp)  
  setwd(dir.tif)  ## very important tips for use rLandsat8
  ## files  <- sapply(file.path(dir.tif,list.files(dir.tif)), tools::file_path_as_absolute)
  ## basename(files)
  ## l8.lst  <- lapply(basename(files), ReadLandsat8)
  l8.lst   <- lapply(dir(dir.tif), ReadLandsat8)
  bandnames <-c("aerosol", "blue", "green", "red",
                "nir", "swir1", "swir2",
                "panchromatic",
                "cirrus")
  for (i in l8.lst) {
          sceneName  <- i$metadata$landsat_scene_id
          if (!file.exists(file.path(dir.toaRefSun, sceneName))) {
                  dir.create(file.path(dir.toaRefSun, sceneName), recursive = T)
          }
          for(j in bandnames){
                  idx <- seq_along(bandnames)[sapply(bandnames, function(x) j %in% x)] # a number
                  bandidx <- paste0("file_name_band_", idx)
                  bandName <-  sapply(i, "[[", bandidx)[[1]]
                  # fileName <- paste0(tools::file_path_sans_ext(bandName), "_TOARefSun.tif")
                  Ref.rst  <- ToTOAReflectance(i, j, is.suncorrected = TRUE)
                  writeRaster(Ref.rst, filename = file.path(dir.toaRefSun, sceneName, bandName), overwrite = T)
                  raster::removeTmpFiles(h = 0.5) ## Improtant tips for save hardisk
          }
  }

#+END_SRC 

*** NEXT Sun elevation Correction pixel by pixel, caculate sun elv use oce
*** CODE DNtoTOABT
**** Demo
#+HEADER: :tangle ../demo/rs13_DNtoTOABrightTemperature.R
#+BEGIN_SRC R 
  source("~/SparkleShare/Rprofile/R/sourceDir.R")
  sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
  sourceDir("~/SparkleShare/TIR/R/")
  dir.tif  <- "~/Share500sda/Landsat8/at0_Sensor"
  dir.toaBT  <- "~/Share500sda/Landsat8/at1_TOA/toaBT"
  dir.tmp <- "~/Share500sda/Landsat8/raster_tmp"
  library(raster)
  rasterOptions(tmpdir = dir.tmp)
  setwd(dir.tif)  ## very important tips for use rLandsat8
  ## files  <- sapply(file.path(dir.tif,list.files(dir.tif)), tools::file_path_as_absolute)
  ## basename(files)
  ## l8.lst  <- lapply(basename(files), ReadLandsat8)
  l8.lst   <- lapply(dir(dir.tif), ReadLandsat8)
  bandnames <-c("tirs1", "tirs2")
  for (i in l8.lst) {
          sceneName  <- i$metadata$landsat_scene_id
          if (!file.exists(file.path(dir.toaBT, sceneName))) {
                  dir.create(file.path(dir.toaBT, sceneName), recursive = T)
          }
          for(j in bandnames){
                  idx <- seq_along(bandnames)[sapply(bandnames, function(x) j %in% x)] + 9 # a number
                  bandidx <- paste0("file_name_band_", idx)
                  bandName <-  sapply(i, "[[", bandidx)[[1]]
                  #fileName <- paste0(tools::file_path_sans_ext(bandName), "_TOABT.tif")
                  BT.rst  <- ToAtSatelliteBrightnessTemperature(i, j)
                  writeRaster(BT.rst, filename = file.path(dir.toaBT, sceneName, bandName), overwrite = T)
                  raster::removeTmpFiles(h = 1) ## Improtant tips for save hardisk
          }
  }

#+END_SRC 

*** NEXT RadtoTOARef
*** NEXT RadtoTOABT
*** TODO OLI Atmospheric Correction
- State "TODO"       from ""           [2014-09-24 Wed 22:22]
*** TODO TIRS Atmospheric Correction
- State "TODO"       from ""           [2014-09-24 Wed 22:22]
*** CODE MergeTOA
**** Demo
#+HEADER: :tangle ../demo/rs14_mergeTOABrightTemperature.R
#+BEGIN_SRC R 
  source("~/SparkleShare/Rprofile/R/sourceDir.R")
  sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
  sourceDir("~/SparkleShare/TIR/R/")
  dir.tif   <- "~/Share500sda/Landsat8/at0_Sensor"
  dir.toaTb <- "~/Share500sda/Landsat8/at1_TOA/toaTb"
  dir.toaTs <- "~/Share500sda/Landsat8/at1_TOA/toaTs"
  dir.toaTe <- "~/Share500sda/Landsat8/at1_TOA/toaTe"
  dir.tmp   <- "~/Share500sda/Landsat8/raster_tmp"
  library(raster)
  rasterOptions(tmpdir = dir.tmp)
  setwd(dir.tif)  ## very important tips for use rLandsat8
  ## files  <- sapply(file.path(dir.tif,list.files(dir.tif)), tools::file_path_as_absolute)
  ## basename(files)
  ## l8.lst  <- lapply(basename(files), ReadLandsat8)
  l8.lst   <- lapply(dir(dir.tif), ReadLandsat8)
  bandnames <-c("tirs1", "tirs2")
  sceneList <- list.files(dir.toaTb, full.names = TRUE) 
  for (i in sceneList) {
          bandList <- list.files(sceneList, full.names = TRUE)
          emiName <- paste0(basename(i), ".tif")
          pngName <- paste0(emiName,".png")
          Tb10 <- raster::raster(bandList[1])
          Tb11 <- raster::raster(bandList[2])
          TbS  <- raster::stack(Tb10, Tb11)
          a <- 1.438*10^-2
          L10 <- 10.9
          L11 <- 12.0
          TbE  <- exp((a*(Tb10 - Tb11))/(Tb10*Tb11*(L10-L11)))
          Ts10  <- Tb10/(1 + (L10*Tb10/a)*log(TbE)
          writeRaster(TbE, filename = file.path(dir.toaTe,emiName), overwrite = T)
          png(file.path(dir.toaTe,pngName))
          plot(TbE)                       
          dev.off()                       
          raster::removeTmpFiles(h = 1) ## Improtant tips for save hardisk
          }
  }

#+END_SRC 


*** Scale Tb
*** 
** At Surface
*** Plot Raster tif2png
**** Examples
#+BEGIN_SRC R

# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)

e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')


# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)

# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)

# two objects, different range, one scale:
r[] <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1) 
nb <- length(brks)-1 
par(mfrow=c(1,2))
plot(r, breaks=brks, col=rev(terrain.colors(nb)), lab.breaks=brks, zlim=c(0,1)) 
plot(r2, breaks=brks, col=rev(terrain.colors(nb)), lab.breaks=brks, zlim=c(0,1)) 


# breaks and labels
x <- raster(nc=10, nr=10)
x[] <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))

# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))

# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)

# for SpatialPolygons do
# plot(pols, add=TRUE)

# adding the same points to each map of each layer of a RasterStack
fun <- function() {
	points(xy, cex=2)
	points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
#+END_SRC
**** Code
#+BEGIN_SRC R :tangle ../R/rs.tif2png.R
   rs.tif2png <- function(dir = getwd()){
          inRaster <- list.files(path = dir, pattern = ".tif$", full.names = TRUE, recursive = TRUE)
          for (i in inRaster) {
                  outName <- gsub("\\.tif", "\\.tif.png", i)
                  r <- raster(i)
                  png(filename = outName)
                  plot(r)
                  dev.off()
          }
  }

#+END_SRC
**** Demo
#+BEGIN_SRC R :tangle ../demo/rs15_tif2png.R
source("~/SparkleShare/Rprofile/R/sourceDir.R")
sourceDir("~/SparkleShare/rLandsat8/src/main/R/rLandsat8/R")
sourceDir("~/SparkleShare/TIR/R/")
dataDir <- "~/Share500sda/Landsat8/at1_TOA"
setwd(dataDir)
rs.tif2png()
#+END_SRC
*** Project Raster
#+BEGIN_SRC R


#+END_SRC
*** Mosaic
*** 
* Man 








